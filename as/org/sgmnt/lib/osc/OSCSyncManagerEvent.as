/** * * Copyright (c) 2010 - 2013, http://sgmnt.org/ *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. * */package org.sgmnt.lib.osc {        import flash.events.Event;        /**     * OSCSyncManager で使われるイベントクラスです。     * @author    sgmnt.org     * @version   0.1.1     */    public class OSCSyncManagerEvent extends Event {                //------- CONST ----------------------------------------------------------------------- */        public static const ENABLED:String       = "_OscSyncManagerEnabled";        public static const DISABLED:String      = "_OscSyncManagerDisabled";        public static const SOCKET_ERROR:String  = "_OscSyncManagerSocketError";		        //------- MEMBER ----------------------------------------------------------------------- */                //------- PUBLIC ----------------------------------------------------------------------- */        public function OSCSyncManagerEvent( type:String, bubbles:Boolean=false, cancelable:Boolean=false ) { 			super(type, bubbles, cancelable);        }                public override function clone():Event {            return new OSCSyncManagerEvent( type, bubbles, cancelable );        }                public override function toString():String {             return formatToString("OscSyncManagerEvent", "type", "bubbles", "cancelable", "eventPhase");         }		        //------- INTERNAL --------------------------------------------------------------------- */		    }}