/** * * Copyright (c) 2010 - 2012, http://sgmnt.org/ *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. * */package org.sgmnt.lib.osc {        import flash.utils.ByteArray;        /**     * OSCメッセージを生成するためのクラス.     * @author  sgmnt.org     * @version 0.1.1     * @example   <listing version="3.0">     *                 var bundle:OSCBundle = new OSCBundle();     *                 var msg:OSCMessage = new OSCMessage();     *                 msg.address = "/test";     *                 msg.addArgument( "s", "test" );     *                 bundle.addMessage( msg );     *                 bundle.setTimeTag();     *            </listing>     */    public class OSCBundle extends OSCPacket{                //------- MEMBER ----------------------------------------------------------------------- */                // Data Properties.        private var _time:Number;        private var _packets:Vector.<OSCPacket>;                //------- PUBLIC ----------------------------------------------------------------------- */                /**         * Constructor.         */        public function OSCBundle() {            _time    = 0;            _packets = new Vector.<OSCPacket>();        }                /**         * Set milliseconds TimeTag.         * @param    time         */        public function setTimeTag( time:Number ):void {            _time = time;        }                /**         * Set milliseconds TimeTag.         * now + offset.         * @param    offset milliseconds         */        public function setTimeTagOffset( offset:Number ):void {            var now:Number = new Date().getTime();            _time = now + offset;        }                /**         * Add bundle OSC Message.         * @param    type         * @param    value         */        public function addPacket( packet:OSCPacket ):void {            _packets.push( packet );        }                /** Get bundle packet bytes. */        override public function get bytes():ByteArray {                        _bytes.clear();                        // --- Write #bundle.                        _bytes.writeBytes( _string("#bundle") );            _bytes.length = 8;            _bytes.position = _bytes.length;                        // --- Write time-tag.                        if( _time == 0 ){                                _bytes.length += 4;                _bytes.position = _bytes.length;                                _bytes.writeBytes( _int32( 1 ) );                _bytes.position = _bytes.length;                            }else{                                var sec:int = _time / 1000 >> 0;                                _bytes.writeBytes( _int32( sec ) );                _bytes.position = _bytes.length;                                _bytes.writeBytes( _int32( ( _time - sec * 1000 ) * 1000 ) );                _bytes.position = _bytes.length;                            }                        for ( var i:int = 0; i < _packets.length; i++ ) {                                var ba:ByteArray = _packets[i].bytes;                                // --- Write Packet length.                _bytes.writeBytes( _int32( ba.length ) );                _bytes.position = _bytes.length;                                // --- Write Packet.                _bytes.writeBytes( ba );                _bytes.position = _bytes.length;                            }                                    _bytes.position = 0;                        return _bytes;                    }                //------- PROTECTED --------------------------------------------------------------------- */                //------- PRIVATE ----------------------------------------------------------------------- */                //------- INTERNAL ---------------------------------------------------------------------- */            }}