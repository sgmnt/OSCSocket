/** * * Copyright (c) 2010 - 2013, http://sgmnt.org/ *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. * */package org.sgmnt.lib.osc {        import flash.utils.ByteArray;        /**     * OSC メッセージ用のベースクラス.     * @author  sgmnt.org     * @version 0.1.1     */    public class OSCPacket{                //------- CONSTS ----------------------------------------------------------------------- */        public static const TYPE_BLOB:String   = "b";        public static const TYPE_DOUBLE:String = "d";        public static const TYPE_FLOAT:String  = "f";        public static const TYPE_INT32:String  = "i";        public static const TYPE_STRING:String = "s";                //------- MEMBER ----------------------------------------------------------------------- */                protected var _bytes:ByteArray;                //------- PUBLIC ----------------------------------------------------------------------- */                /**         * Constructor.         */        public function OSCPacket() {            _bytes = new ByteArray();        }                /** Get packet bytes. */        public function get bytes():ByteArray { return _bytes; }                //------- PROTECTED -------------------------------------------------------------------- */                /**         * String to ByteArray.         * @param    value         * @return         */        protected function _string( value:String ):ByteArray {                        var bl4:int,                ba:ByteArray = new ByteArray();                        ba.writeUTFBytes( value );                        bl4 = ba.length % 4;                        if ( 0 < bl4 ) {                ba.length += 4 - bl4;            }else {                ba.length += 4;            }                        return ba;                    }                /**         * Float to ByteArray.         * @param    value         * @return         */        protected function _float( value:Number ):ByteArray {                        var bl4:int,                ba:ByteArray = new ByteArray();                        ba.writeFloat( value );                        bl4 = ba.length % 4;                        if ( 0 < bl4 ) ba.length += 4 - bl4;                        return ba;                    }                /**         * Double to ByteArray.         * @param    value         * @return         */        protected function _double( value:Number ):ByteArray {                        var bl4:int,                ba:ByteArray = new ByteArray();                        ba.writeDouble( value );                        bl4 = ba.length % 4;                        if ( 0 < bl4 ) ba.length += 4 - bl4;                        return ba;                    }                /**         * Int to ByteArray.         * @param    value         * @return         */        protected function _int32( value:int ):ByteArray {                        var bl4:int,                ba:ByteArray = new ByteArray();                        ba.writeInt( value );                        bl4 = ba.length % 4;                        if ( 0 < bl4 ) ba.length += 4 - bl4;                        return ba;                    }                /**         * Object to ByteArray.         * @param    value         * @return         */        protected function _blob( value:* ):ByteArray {                        var bl4:int,                ba:ByteArray = new ByteArray();                        ba.writeObject( value );                        bl4 = ba.length % 4;                        if ( 0 < bl4 ) {                ba.length += 4 - bl4;            }else {                ba.length += 4;            }                        return ba;                    }            }}