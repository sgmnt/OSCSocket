/** * * Copyright (c) 2010 - 2013, http://sgmnt.org/ *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. * */package org.sgmnt.lib.osc {        import flash.utils.ByteArray;        /**     * OSCメッセージを生成するためのクラス.     * @author  sgmnt.org     * @version 0.1.1     * @example   <listing version="3.0">     *                 var msg:OSCMessage = new OSCMessage("/test ,s test");     *                 var msg2:OSCMessage = new OSCMessage();     *                 msg2.address = "/test";     *                 msg2.addArgument( "s", "test" );     *            </listing>     */    public class OSCMessage extends OSCPacket{                //------- MEMBER ----------------------------------------------------------------------- */                // Data Properties.        private var _address:String;        private var _types:String;        private var _values:Array;                // Message ByteArray.        private var _valueBA:ByteArray;                //------- PUBLIC ----------------------------------------------------------------------- */                /**         * Constructor.         * @param	messageString         */        public function OSCMessage( oscString:* = null ) {                        super();                        _types   = ",";            _values  = new Array();            _valueBA = new ByteArray();                        if ( oscString ) {                _convert( oscString );            }                    }                /** Message Address. */        public function get address():String { return _address; }        public function set address( value:String ):void {            _address   = value;        }                /** Message Arguments. */        public function get arguments():Array { return _values; }                /**         * Add argument to this message.         * @param	type         * @param	value         */        public function addArgument( type:String, value:* ):void {                        var ba:ByteArray;                        switch( type.toLocaleLowerCase() ) {                case "s":                    ba = _string( value );                    break;                case "f":                    ba = _float( value );                    break;                case "d":                    ba = _double( value );                    break;                case "i":                    ba = _int32( value );                    break;                case "b":                    ba = _blob( value );                    break;                default :                    throw new ArgumentError( "Invalid Type : " + type );                    return;            }                        _types += type;            _values.push( value );                        _valueBA.position = _valueBA.length;            _valueBA.writeBytes( ba );                    }                /** Get osc packet bytes. */        override public function get bytes():ByteArray {                         _bytes.clear();            _bytes.position = 0;                        // --- write address.                        _bytes.writeBytes( _string( _address ) );            _bytes.position = _bytes.length;                        // --- write types.                        _bytes.writeBytes( _string( _types ) );            _bytes.position = _bytes.length;                        // --- write values.                        _bytes.writeBytes( _valueBA );                        _bytes.position = 0;                        return _bytes;                    }                //------- PRIVATE ----------------------------------------------------------------------- */                /**         * Conver OSC String to OSCMessage properties.         * @param	oscString         */        private function _convert( oscString:String ):void {                        var arr:Array = oscString.split(" "),                addr:String = arr[0], type:String = arr[1], vals:Array = arr.splice(2, arr.length);                        address = addr;                        for ( var i:int = 0, len:int = type.length - 1; i < len; i++ ) {                addArgument( type.charAt(i + 1), vals[i] );            }                    }                //------- INTERNAL ----------------------------------------------------------------------- */            }}