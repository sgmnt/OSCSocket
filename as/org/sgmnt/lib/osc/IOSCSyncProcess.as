/** *  * Copyright (c) 2010 - 2013, http://sgmnt.org/ *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. * */package org.sgmnt.lib.osc {		import flash.events.IEventDispatcher;
	    /**     * OscSyncManager で管理される処理同期プロセス用インターフェース.	 * 	 * @author  sgmnt.org     * @version 0.1     */    public interface IOSCSyncProcess extends IEventDispatcher{				/** 同期グループ. */		function get group():String;				/** 同期キー */		function get key():String;				/** 同期プロセスの名称 (group:key) */		function get name():String;				/** 同期開始時刻. */		function get timestamp():Number;				// --- Activity Information. ---				/** 同期処理が実行中であるか. */		function get running():Boolean;				/**		 * グループ登録が受け付けられ,実行可能な状態にあるか.		 * これが false の状況で begin 等を実行した場合は true になるまで実行を延期する.		 */		function get enable():Boolean;				// --- Host Information. ---				/** 自分がこのグループのホストであるかを調べる. */		function get isHost():Boolean;				/** ローカルグループ内のリーダーであるかを調べる. */		function get isLocalLeader():Boolean;				// --- Process Settings. ---				/**		 * 実行する関数を追加します.		 * @param closure		 */		function addProcess( closure:Function ):void;				// =============================================================		// === SYNC BEGIN				/**		 * 処理を開始します.		 * ホストでない場合は何も行いません.		 * @param args		 */		function begin( ...args ):void;				/**		 * 処理シーケンスの完了通知を行います.		 * @param pointer		 */		function complete( closure:Function ):void;				// =============================================================		// === SYNC CANCEL				/**		 * キャンセル処理を行います.		 */		function cancel():void;				// =============================================================		// === SYNC ERROR				/**		 * エラー発生を通知します.		 */		function error():void;				/**		 * インスタンスを破棄します.		 * 不要になったインスタンスは必ずこの関数を実行し破棄してください.		 */		function destroy():void;		    }	}