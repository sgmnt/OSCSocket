/** * * Copyright (c) 2010 - 2012, http://sgmnt.org/ *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. * */package org.sgmnt.lib.osc {        import flash.events.Event;         /**     * OSCSocket で使われるイベントクラスです。     * @author    sgmnt.org     * @version    0.1.1     */    public class OSCSocketEvent extends Event {                //------- CONST ----------------------------------------------------------------------- */				/** 初期化完了の通知. OSCBroadcastSocket のみで利用. */        public static const BROADCAST_SOCKET_INITIALIZED:String = "_OSCBroadcastSocketInitialized";				public static const DATA:String   = "_OSCSocketData";        public static const CLOSE:String  = "_OSCSocketClose";        public static const ERROR:String  = "_OSCSocketError";                //------- MEMBER ----------------------------------------------------------------------- */        private var _srcAddress:String;        private var _srcPort:int;        private var _address:String;        private var _args:Array;                //------- PUBLIC ----------------------------------------------------------------------- */        public function OSCSocketEvent( type:String, srcAddress:String = null, srcPort:int = -1, address:String = null, args:Array = null,										bubbles:Boolean=false, cancelable:Boolean=false ) { 			super(type, bubbles, cancelable);			_setSrcState( srcAddress, srcPort );			_setOSCMessage( address, args );        }                public override function clone():Event {            return new OSCSocketEvent( type, srcAddress, srcPort, address, (new Array().concat(args)), bubbles, cancelable );        }                public override function toString():String {             return formatToString("OSCSocketEvent", "type", "address", "bubbles", "cancelable", "eventPhase");         }                /** OSC Address. */        public function get address():String{ return _address; }                /** Arguments of OSC Message. */        public function get args():Array{ return _args; }                /** パケットの送信元マシンの IP アドレスです。 */        public function get srcAddress():String{ return _srcAddress; }                /** パケットの送信元マシンのポートです。 */        public function get srcPort():int{ return _srcPort; }                //------- INTERNAL --------------------------------------------------------------------- */                internal function _setSrcState( address:String, port:int ):void{            _srcAddress = address;            _srcPort    = port;        }                internal function _setOSCMessage( address:String = null, args:Array = null ):OSCSocketEvent{            _address = address;            _args    = args;            return this;        }            }}