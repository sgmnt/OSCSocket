/** * * Copyright (c) 2010 - 2012, http://sgmnt.org/ *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. * */package  {		import flash.display.MovieClip;	import org.sgmnt.lib.osc.OSCSocket;	import flash.display.NativeWindowInitOptions;	import flash.display.NativeWindowType;	import flash.display.Sprite;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.display.NativeWindow;	import org.sgmnt.lib.osc.OSCSocketEvent;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.display.Stage;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormatAlign;	import flash.geom.Point;	import flash.display.SimpleButton;	import flash.events.MouseEvent;		/**	 * Application for OSCTest.	 * @author hrfm	 */	public class OscTesterReceiverWindow extends MovieClip {				// ------- MEMBER -----------------------------------------------------------				private var _socket:OSCSocket;				private var _nw:NativeWindow;		private var _stage:Stage;				private var _maxLines:int;				private var _container:Sprite;		private var _bindTF:TextField;		private var _msgTF:TextField;		private var _showAddrBtn:SimpleButton;		private var _hideAddrBtn:SimpleButton;				private var _margeOnBtn:SimpleButton;		private var _margeOffBtn:SimpleButton;				private var _recentMsg:String;		private var _recentText:String;		private var _sameCount:int;				// ------- PUBLIC -----------------------------------------------------------				public function OscTesterReceiverWindow( bindAddr:String, bindPort:int, maxLines:int = 100 ):void{						_socket = new OSCSocket();			_socket.addEventListener( OSCSocketEvent.DATA, _onData );			_socket.bind( bindPort, bindAddr );			_socket.receive();						_maxLines = maxLines;						// --- Graphic.						_container = new Sprite();						// textField						var fmt:TextFormat = new TextFormat("_sans", 11, 0x666666 );			fmt.align = TextFormatAlign.CENTER;			fmt.letterSpacing = 1.0;			fmt.leading = 1.0;						_bindTF = new TextField();			_bindTF.autoSize = TextFieldAutoSize.LEFT;			_bindTF.defaultTextFormat = fmt;			_bindTF.multiline = false;			_bindTF.wordWrap  = true;			_bindTF.text = bindAddr + ":" + bindPort;			_container.addChild( _bindTF );						fmt.align       = TextFormatAlign.LEFT;			fmt.color       = 0xCCCCCC;			fmt.leftMargin  = 5;			fmt.rightMargin = 5;			fmt.size        = 9;						_msgTF = new TextField();			_msgTF.border = true;			_msgTF.borderColor = 0x666666;			_msgTF.background = true;			_msgTF.backgroundColor = 0x202020;			_msgTF.defaultTextFormat = fmt;			_msgTF.multiline = true;			_msgTF.wordWrap  = true;			_container.addChild( _msgTF );						// -------						_showAddrBtn = new ShowAddrBtn() as SimpleButton;			_showAddrBtn.visible = false;			_showAddrBtn.addEventListener(MouseEvent.CLICK, _onShowAddrBtnClick );			_container.addChild( _showAddrBtn );						_hideAddrBtn = new HideAddrBtn() as SimpleButton;			_hideAddrBtn.addEventListener(MouseEvent.CLICK, _onHideAddrBtnClick );			_container.addChild( _hideAddrBtn );						// -------						_margeOffBtn = new MargeSameMessageOff() as SimpleButton;			_margeOffBtn.visible = false;			_margeOffBtn.addEventListener(MouseEvent.CLICK, _onMargeOffBtnClick );			_container.addChild( _margeOffBtn );						_margeOnBtn = new MargeSameMessageOn() as SimpleButton;			_margeOnBtn.addEventListener(MouseEvent.CLICK, _onMargeOnBtnClick );			_container.addChild( _margeOnBtn );						// --- Create New NativeWindow.						var options:NativeWindowInitOptions = new NativeWindowInitOptions();			options.type = NativeWindowType.UTILITY;						_nw = new NativeWindow( options );						_nw.x = 0;			_nw.y = 0;			_nw.width = 300;			_nw.height = 380;			_nw.minSize = new Point(200,200);			_nw.activate();						_stage = _nw.stage;			_stage.align        = StageAlign.TOP_LEFT;			_stage.scaleMode    = StageScaleMode.NO_SCALE;			_stage.frameRate    = 30;			_stage.addEventListener(Event.RESIZE, _onResize );			_stage.addChild( _container );						_nw.addEventListener(Event.CLOSING, _onWindowClosing );						_update();					}				override public function get x():Number{ return _nw.x; }		override public function set x( value:Number ):void{			_nw.x = value;		}				override public function get y():Number{ return _nw.y; }		override public function set y( value:Number ):void{			_nw.y = value;		}				override public function get width():Number{ return _nw.width; }		override public function set width( value:Number ):void{			_nw.width = value;		}				override public function get height():Number{ return _nw.height; }		override public function set height( value:Number ):void{			_nw.height = value;		}				public function get nativeWindow():NativeWindow{ return _nw; }				// ------- PRIVATE -----------------------------------------				private function _onResize( event:Event ):void{			_update();		}				private function _onShowAddrBtnClick(event:MouseEvent):void{			_hideAddrBtn.visible = true;			_showAddrBtn.visible = false;		}				private function _onHideAddrBtnClick(event:MouseEvent):void{			_showAddrBtn.visible = true;			_hideAddrBtn.visible = false;		}				private function _onMargeOnBtnClick(event:MouseEvent):void{			_margeOffBtn.visible = true;			_margeOnBtn.visible  = false;		}				private function _onMargeOffBtnClick(event:MouseEvent):void{			_margeOnBtn.visible = true;			_margeOffBtn.visible = false;		}				private function _update():void{						_container.graphics.clear();			_container.graphics.beginFill( 0x333333, 1.0 );			_container.graphics.drawRect( 0, 0, _stage.stageWidth, _stage.stageHeight );			_container.graphics.endFill();						_bindTF.x = 10;			_bindTF.y = 10;			_bindTF.width = _stage.stageWidth - 20;						_showAddrBtn.x = _hideAddrBtn.x = Math.round( _stage.stageWidth / 2 - _showAddrBtn.width - 5 );			_showAddrBtn.y = _hideAddrBtn.y = _stage.stageHeight - 10 - _showAddrBtn.height;						_margeOffBtn.x = _margeOnBtn.x = Math.round( _stage.stageWidth / 2 + 5 );			_margeOffBtn.y = _margeOnBtn.y = _stage.stageHeight - 10 - _margeOffBtn.height;						_msgTF.x = 10;			_msgTF.y = _bindTF.y + _bindTF.height + 5;			_msgTF.width  = _stage.stageWidth - 20;			_msgTF.height = _showAddrBtn.y - _msgTF.y - 10;						_msgTF.scrollV = _msgTF.maxScrollV;					}				private function _onData(e:OSCSocketEvent):void{						var msg:String = e.address + " : " + e.args.join(", ");			if( _hideAddrBtn.visible ){				msg = e.srcAddress + ":" + e.srcPort + " - " + msg;			}						if( _margeOnBtn.visible && _recentMsg == msg ){								_sameCount++;				if( 1 < _sameCount ){					_msgTF.text = _recentText + msg + " [" + _sameCount + "]\n";				}else{					_msgTF.text = _recentText + msg + "\n";				}							}else{								_sameCount = 0;								_recentText = _msgTF.text;				_recentMsg  = msg;								_msgTF.appendText( msg + "\n" );								if( _maxLines < _msgTF.numLines){					var str:String = "";					for( var i:int = _msgTF.numLines - _maxLines; i < _msgTF.numLines; i++ ){						str += _msgTF.getLineText(i);					}					_msgTF.text = str;				}							}						_msgTF.scrollV = _msgTF.maxScrollV;					}				/**		 * NativeWindow が閉じられる際に実行される処理.		 * ソケット接続を切断し,インスタンスを削除します.		 */		private function _onWindowClosing(event:Event):void{			_socket.close();			_socket = null;		}			}	}