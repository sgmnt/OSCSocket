/** * * Copyright (c) 2010 - 2012, http://sgmnt.org/ *  * Permission is hereby granted, free of charge, to any person obtaining * a copy of this software and associated documentation files (the * "Software"), to deal in the Software without restriction, including * without limitation the rights to use, copy, modify, merge, publish, * distribute, sublicense, and/or sell copies of the Software, and to * permit persons to whom the Software is furnished to do so, subject to * the following conditions: *  * The above copyright notice and this permission notice shall be * included in all copies or substantial portions of the Software. *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. * */package  {		import flash.display.MovieClip;	import flash.text.TextField;	import flash.display.SimpleButton;	import flash.events.MouseEvent;	import flash.events.Event;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.text.TextFormat;	import flash.display.Screen;		import org.sgmnt.lib.osc.OSCMessage;	import org.sgmnt.lib.osc.OSCSocket;	import flash.geom.Rectangle;		/**	 * Application for OSCTest.	 * @author hrfm	 */	public class OscTester extends MovieClip {				// ------- MEMBER --------------------------------------------------------------				private var _socket:OSCSocket;		private var _receiverWindows:Vector.<OscTesterReceiverWindow>;		private var _recentWindow:OscTesterReceiverWindow;				public var sendMsgTF:TextField;		public var sendAddrTF:TextField;		public var sendPortTF:TextField;		public var sendBtn:SimpleButton;				public var receiverAddrTF:TextField;		public var receiverPortTF:TextField;		public var receiverBtn:SimpleButton;				// ------- PUBLIC --------------------------------------------------------------				public function OscTester() {						this.stage.align     = StageAlign.TOP_LEFT;			this.stage.scaleMode = StageScaleMode.NO_SCALE;						_socket = new OSCSocket();						_receiverWindows = new Vector.<OscTesterReceiverWindow>();						var fmt:TextFormat = new TextFormat();			fmt.color = 0xffffff;						sendMsgTF.borderColor     = 0x666666;			sendMsgTF.backgroundColor = 0x202020;			sendMsgTF.addEventListener(KeyboardEvent.KEY_DOWN, _onKeyDown );						sendAddrTF.borderColor     = 0x666666;			sendAddrTF.backgroundColor = 0x202020;						sendPortTF.borderColor     = 0x666666;			sendPortTF.backgroundColor = 0x202020;						receiverAddrTF.borderColor     = 0x666666;			receiverAddrTF.backgroundColor = 0x202020;						receiverPortTF.borderColor     = 0x666666;			receiverPortTF.backgroundColor = 0x202020;						sendBtn.addEventListener(MouseEvent.CLICK, _sendMessage );			receiverBtn.addEventListener(MouseEvent.CLICK, _onReceiverBtnClick );						this.stage.nativeWindow.alwaysInFront = true;			this.stage.nativeWindow.addEventListener(Event.CLOSING, _onWindowClosing );					}				// ------- PRIVATE -------------------------------------------------------				private function _onKeyDown( event:KeyboardEvent ):void{			if( event.keyCode == Keyboard.ENTER ){				_sendMessage();			}		}				private function _sendMessage(event:MouseEvent = null):void{			_socket.send( new OSCMessage( sendMsgTF.text ), sendAddrTF.text, int( sendPortTF.text ) );		}						private function _onReceiverBtnClick(event:MouseEvent):void{			try{								var screenBounds:Rectangle = Screen.mainScreen.bounds;				var x_:Number = 50;				var y_:Number = 50;								if( _recentWindow ){										x_ = _recentWindow.x + _recentWindow.width + 5;					y_ = _recentWindow.y;										if( x_ < screenBounds.x + 50 ){						x_ = screenBounds.x + 50;					}else if( screenBounds.right < x_ + 300 ){						x_ = screenBounds.x + 50;						y_ += 50;					}										if( screenBounds.bottom < y_ + 200 ){						y_ = 50;					}									}								var win:OscTesterReceiverWindow = new OscTesterReceiverWindow( receiverAddrTF.text, int( receiverPortTF.text ), x_, y_ );				win.addEventListener(Event.CLOSING, _onReceiverWindowClose );								_receiverWindows.push( win );								_recentWindow = win;								this.stage.nativeWindow.activate();							}catch(e){				trace(e);			}		}				/**		 * ReceiverWindow が閉じられた際の処理.		 * 管理配列から消す.		 * @param event		 */		private function _onReceiverWindowClose(event:Event):void{			var win:OscTesterReceiverWindow = event.target as OscTesterReceiverWindow;			if( win ){				win.removeEventListener(Event.CLOSE, _onReceiverWindowClose );				for( var i:int = 0; i < _receiverWindows.length; i++ ){					if( _receiverWindows[i] == win ){						trace("delete");						_receiverWindows.splice( i--, 1 );					}					if( _recentWindow == win ){						if( _receiverWindows.length == 0 ){							_recentWindow = null;						}else{							_recentWindow = _receiverWindows[_receiverWindows.length-1];						}					}				}			}		}				private function _onWindowClosing(event:Event){						for( var i:int = 0; i < _receiverWindows.length; i++ ){				try{					_receiverWindows[i].nativeWindow.close();				}catch(e){}			}						_socket.close();			_socket = null;					}			}	}