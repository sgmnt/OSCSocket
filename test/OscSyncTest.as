package{		import flash.display.Sprite;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;		import org.sgmnt.lib.osc.OSCBroadcastSocket;	import org.sgmnt.lib.osc.OSCSocketEvent;	import org.sgmnt.lib.osc.OSCSyncManager;	import org.sgmnt.lib.osc.OSCSyncManagerConfigure;	import org.sgmnt.lib.osc.OSCSyncProcess;	import org.sgmnt.lib.osc.OSCSyncProcessEvent;		public class OscSyncTest extends Sprite	{				private var _process:OSCSyncProcess;		private var _sock:OSCBroadcastSocket;				private var _timer:Timer;				public function OscSyncTest(){			_sock = OSCBroadcastSocket.getInstance();			_sock.addEventListener( OSCSocketEvent.BROADCAST_SOCKET_INITIALIZED, _onInit );			_sock.initialize();		}				private function _onInit(event:OSCSocketEvent):void{						OSCSyncManager.getInstance().initialize( new OSCSyncManagerConfigure( _sock ) );						_process = new OSCSyncProcess('hoge','fuga');			_process.addProcess(process1);			_process.addProcess(process2);			_process.addProcess(process3);			_process.addProcess(process4);						_process.addEventListener( OSCSyncProcessEvent.BEGIN, trace );			_process.addEventListener( OSCSyncProcessEvent.END, function(){				_process.begin( 0xff0000, 0x00ff00, 0x0000ff, 0xffff00 );			});			_process.addEventListener( OSCSyncProcessEvent.CANCEL, _onCancel );						stage.addEventListener(MouseEvent.CLICK,function(e){				if( _process.running ){					_process.cancel();				}else{					_process.begin( 0xff0000, 0x00ff00, 0x0000ff, 0xffff00 );				}			});						_timer = new Timer(3000,1);						trace('Test Start.');					}				function process1(args:*=null){						var color:uint = uint( args[0] );						trace('process1',color);						graphics.clear();			graphics.beginFill( color, 1.0 );			graphics.drawRect( 0,0, stage.stageWidth, stage.stageHeight );						_timer.addEventListener(TimerEvent.TIMER_COMPLETE,function(){				_timer.removeEventListener(TimerEvent.TIMER_COMPLETE, arguments.callee);				//_process.cancel();				_process.complete( process1 );			});			_timer.reset();			_timer.start();					}				function process2(args:*=null){						var color:uint = uint( args[1] );						trace('process2',color);						graphics.clear();			graphics.beginFill( color, 1.0 );			graphics.drawRect( 0,0, stage.stageWidth, stage.stageHeight );						_timer.addEventListener(TimerEvent.TIMER_COMPLETE,function(){				_timer.removeEventListener(TimerEvent.TIMER_COMPLETE, arguments.callee);				//_process.cancel();				_process.complete( process2 );			});			_timer.reset();			_timer.start();					}				function process3(args:*=null){						var color:uint = uint( args[2] );						trace('process3',color);						graphics.clear();			graphics.beginFill( color, 1.0 );			graphics.drawRect( 0,0, stage.stageWidth, stage.stageHeight );						_timer.addEventListener(TimerEvent.TIMER_COMPLETE,function(){				_timer.removeEventListener(TimerEvent.TIMER_COMPLETE, arguments.callee);				//_process.cancel();				_process.complete( process3 );			});			_timer.reset();			_timer.start();					}						function process4(args:*=null){						var color:uint = uint( args[3] );						trace('process4',color);						graphics.clear();			graphics.beginFill( color, 1.0 );			graphics.drawRect( 0,0, stage.stageWidth, stage.stageHeight );						_process.complete( process4 );					}						private function _onCancel(e:OSCSyncProcessEvent):void{			trace(e);			_timer.stop();			graphics.clear();		}			}}